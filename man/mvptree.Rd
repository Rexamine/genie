% Generated by roxygen2 (4.0.1): do not edit by hand
\name{mvptree_create}
\alias{mvpTree}
\alias{mvptree_build}
\alias{mvptree_create}
\alias{mvptree_insert}
\alias{mvptree_searchKNN}
\alias{mvptree_searchRadius}
\title{mvpTree}
\usage{
mvptree_create(distance, isSimilarity = FALSE, mvp_branchfactor = 2L,
  mvp_pathlength = 5L, mvp_leafcap = 25L)

mvptree_insert(tree, obj)

mvptree_build(tree, listobj)

mvptree_searchKNN(tree, p, k, findItself = TRUE)

mvptree_searchRadius(tree, p, tau, findItself = TRUE)
}
\arguments{
\item{distance}{an R function, which calculates metric in the space}

\item{isSimilarity}{a logical value, does a distance function calculate
distance or similarity?}

\item{m}{single integer, maximum number of children can be in a node
in the tree}

\item{minm}{single integer, minimum number of children can be in a node
in the tree}

\item{maxLeafPointsCount}{single integer, maximum number of
points in a single leaf}

\item{vantageCandidatesCount}{single integer, number of candidates
considered as a vantage point in a single node. Too big number can
cause performance problem in building the tree, but too small can cause
performance problem when searching.}

\item{testPointsCount}{single integer, how many points are considered with
a single candidate for vantage point in a node to assess a variance of
distances}

\item{obj}{a point to insert}

\item{listobj}{an R list, where every element of list is assumed as one
point in a  metric space}

\item{p}{an R object for which neighbours are found}

\item{k}{a single integer, number of neighbours to find}

\item{findItself}{boolean value, should results contain an given object?}

\item{p}{an R object for which neighbours are found}

\item{tau}{a float value, a radius}

\item{findItself}{boolean value, should results contain an given object?}
}
\value{
\code{mvptree_create} returns a new, empty m-tree.

\code{mvptree_insert} does not return anything interesting.

\code{mvptree_build} does not return anything interesting.

\code{mvptree_searchKNN} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{mvptree_searchRadius} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.
}
\description{
mvpTree is an implementation of mvp tree, which is a metric tree.
}
\details{
\code{mvptree_create} creates an empty m-tree instance. Please use
\code{mvptree_build} for populating the tree.

\code{mvptree_insert} inserts a new point into a m-tree.
Calling this function n times has worse performance in comparison
to calling one \code{mvptree_build} with n points in the beginning.

\code{mvptree_build} populates an empty tree with set of points. If called
for non-empty tree, whole structure of previous tree is deleted. This is
recommended way of building a tree (instead of inserts by
\code{mvptree_insert}).

\code{mvptree_searchKNN} finds k nearest neighbours for a given object
in the tree.
Please use this function for objects, which are not in a set of points
inserted to the tree or which were used for building the tree. For these
cases please use \code{mvptree_searchKNNKnown} or
\code{mvptree_searchKNNKnownIndex} which can be faster.

\code{mvptree_searchRadius} finds neighbours for a given object
within a given radius in the tree.
Please use this function for objects, which are not in a set of points
inserted to the tree or which were used for building the tree. For these
cases please use \code{mvptree_searchRadiusKnown} or
\code{mvptree_searchRadiusKnownIndex} which can be faster.
}


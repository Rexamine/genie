% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/RcppExports.R, R/queue.R
\name{as.list.Queue}
\alias{Queue}
\alias{as.list.Queue}
\alias{format.Queue}
\alias{print.Queue}
\alias{queue_create}
\alias{queue_empty}
\alias{queue_pop}
\alias{queue_push}
\alias{str.Queue}
\title{Queue}
\usage{
\method{as.list}{Queue}(queue)

queue_create()

queue_empty(queue)

queue_push(queue, obj)

queue_pop(queue)

\method{print}{Queue}(queue, ...)

\method{format}{Queue}(queue, ...)

\method{str}{Queue}(queue, ...)
}
\arguments{
\item{queue}{a queue object}

\item{obj}{an R object}

\item{...}{other arguments passed to or from other methods}

\item{...}{other arguments passed to or from other methods}
}
\value{
\code{as.list.Queue} returns an R list object.

\code{queue_create} returns a new, empty queue.

\code{queue_empty} returns a single logical value.

\code{queue_push} does not return anything interesting.

\code{queue_pop} returns an object at the top of te queue or
throws an error if the stack is empty.

\code{print.Queue} returns the queue coerced to a list, invisibly.

\code{format.Queue} returns the character representation
of the objects in the queue

\code{str.Queue} does not return anything interesting.
}
\description{
Queue is an abstract data type which allows for pushing elements
and popping them in normal (first in-first out) order.
}
\details{
\code{as.list.Queue} converts a given queue object to an R list.

\code{queue_create} creates a new queue.

\code{queue_empty} determines if a given queue is empty or not.

\code{queue_push} pushes a given object to the back of the queue.

\code{queue_pop} pops an object from the top of the queue.

\code{print.Queue} prints the contents of the queue
(coerced to a list object) on the console.

\code{format.Queue} pretty-prints the contents of the queue
(coerced to a list object) on the console.

\code{str.Queue} compactly displays the contents of the queue
(coerced to a list object) on the console.
}


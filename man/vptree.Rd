% Generated by roxygen2 (4.0.1): do not edit by hand
\name{vptree_create}
\alias{VpTree}
\alias{vptree_build}
\alias{vptree_create}
\alias{vptree_getFunction}
\alias{vptree_getItems}
\alias{vptree_insert}
\alias{vptree_load}
\alias{vptree_read}
\alias{vptree_save}
\alias{vptree_searchKNN}
\alias{vptree_searchKNNKnown}
\alias{vptree_searchKNNKnownIndex}
\alias{vptree_searchRadius}
\alias{vptree_searchRadiusKnown}
\alias{vptree_searchRadiusKnownIndex}
\alias{vptree_serialize}
\alias{vptree_setItems}
\alias{vptree_setMetricFunction}
\alias{vptree_set_distancefunction}
\title{VpTree}
\usage{
vptree_create(distance, isSimilarity = FALSE, m = 2L, minm = 4L,
  maxLeafPointsCount = 25L, vantageCandidatesCount = 5L,
  testPointsCount = 15L)

vptree_insert(tree, obj)

vptree_set_distancefunction(tree, distance, isSimilarity = FALSE)

vptree_build(tree, listobj)

vptree_searchKNN(tree, p, k)

vptree_searchKNNKnown(tree, p, k)

vptree_searchKNNKnownIndex(tree, index, k)

vptree_searchRadius(tree, p, tau)

vptree_searchRadiusKnown(tree, p, tau)

vptree_searchRadiusKnownIndex(tree, index, tau)

vptree_getItems(vptree)

vptree_getFunction(vptree)

vptree_serialize(vptree, filename)

vptree_read(filename)

vptree_setItems(vptree, items)

vptree_setMetricFunction(vptree, f)

vptree_save(vptree, filenamePrefix)

vptree_load(filenamePrefix)
}
\arguments{
\item{distance}{an R function, which calculates metric in the space}

\item{isSimilarity}{a logical value, does a distance function calculate
distance or similarity?}

\item{m}{single integer, maximum number of children can be in a node
in the tree}

\item{minm}{single integer, minimum number of children can be in a node
in the tree}

\item{maxLeafPointsCount}{single integer, maximum number of
points in a single leaf}

\item{vantageCandidatesCount}{single integer, number of candidates
considered as a vantage point in a single node. Too big number can
cause performance problem in building the tree, but too small can cause
performance problem when searching.}

\item{testPointsCount}{single integer, how many points are considered with
a single candidate for vantage point in a node to assess a variance of
distances}

\item{obj}{a point to insert}

\item{distance}{an R function, which calculates metric in the space}

\item{isSimilarity}{a logical value, does a distance function calculate
distance or similarity?}

\item{listobj}{an R list, where every element of list is assumed as one
point in a  metric space}

\item{p}{an R object for which neighbours are found}

\item{k}{a single integer, number of neighbours to find}

\item{p}{an R object for which neighbours are found}

\item{k}{a single integer, number of neighbours to find}

\item{index}{index of an object in the space}

\item{k}{a single integer, number of neighbours to find}

\item{p}{an R object for which neighbours are found}

\item{tau}{a float value, a radius}

\item{p}{an R object for which neighbours are found}

\item{tau}{a float value, a radius}

\item{index}{index of an object in the space}

\item{tau}{a float value, a radius}

\item{filename}{a path to file in which a strucutre of a tree will be saved.}

\item{filename}{a path to file in which a strucutre of a tree is saved.}

\item{items}{a list of points.}

\item{f}{a metric function.}

\item{filenamePrefix}{the prefix of names of group of 3 files. Can be
absolute or relative path.}

\item{filenamePrefix}{the prefix of names of group of 3 files. Can be
absolute or relative path.}
}
\value{
\code{vptree_create} returns a new, empty vp-tree.

\code{vptree_insert} does not return anything interesting.

\code{vptree_set_distancefunction} does not return anything interesting.

\code{vptree_build} does not return anything interesting.

\code{vptree_searchKNN} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_searchKNNKnown} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_searchKNNKnown} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_searchRadius} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_searchRadiusKnown} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_searchRadiusKnownIndex} returns a list. First element of the list
is a list with found elements. A second element of the list is a list
with distances these objects from a given object.

\code{vptree_getItems} returns a list.

\code{vptree_getFunction} returns a function.

\code{vptree_getFunction} does not return anything interesting.

\code{vptree_read} does not return anything interesting.

\code{vptree_setItems} does not return anything interesting.

\code{vptree_setMetricFunction} does not return anything interesting.

\code{vptree_save} does not return anything interesting.

\code{vptree_load} returns a loaded vptree.
}
\description{
VpTree is an implementation of vantage-point tree, which is a metric tree.
}
\details{
\code{vptree_create} creates an empty vp-tree instance. Please use
\code{vptree_build} for populating the tree.

\code{vptree_insert} inserts a new point into a vp-tree.
Calling this function n times has worse performance in comparison
to calling one \code{vptree_build} with n points in the beginning.

\code{vptree_set_distancefunction} sets a metric function for a tree.
Setting this function after building a tree will cause problems. Do not
use if you do not know what you are doing.

\code{vptree_build} populates an empty tree with set of points. If called
for non-empty tree, whole structure of previous tree is deleted. This is
recommended way of building a tree (instead of inserts by
\code{vptree_insert}).

\code{vptree_searchKNN} finds k nearest neighbours for a given object
in the tree.
Please use this function for objects, which are not in a set of points
inserted to the tree or which were used for building the tree. For these
cases please use \code{vptree_searchKNNKnown} or
\code{vptree_searchKNNKnownIndex} which can be faster.

\code{vptree_searchKNNKnown} finds k nearest neighbours for a given object
in the tree which was used for building the tree or inserted after that.
Please do not use this function for objects, which are "new" in a metric
space. This function can be faster than \code{vptree_searchKNN}.

\code{vptree_searchKNN} finds k nearest neighbours for a given index of
the object in space. Indices are as in a list given for building a tree.
For inserted objects they are pushed back at the end.
Please do not use this function for objects, which are "new" in a metric
space. This function can be faster than \code{vptree_searchKNN} and
\code{vptree_searchKNNKnown}. Indexing starts with 1, as in R language.

\code{vptree_searchRadius} finds neighbours for a given object
within a given radius in the tree.
Please use this function for objects, which are not in a set of points
inserted to the tree or which were used for building the tree. For these
cases please use \code{vptree_searchRadiusKnown} or
\code{vptree_searchRadiusKnownIndex} which can be faster.

\code{vptree_searchRadiusKnown} finds nearest neighbours for a given object
within a given radius
in the tree which was used for building the tree or inserted after that.
Please do not use this function for objects, which are "new" in a metric
space. This function can be faster than \code{vptree_searchRadius}.

\code{vptree_searchRadiusKnownIndex} finds nearest neighbours
for a given index of the object in space
within a given radius . Indices are as in a list given for building a tree.
For inserted objects they are pushed back at the end.
Please do not use this function for objects, which are "new" in a metric
space. This function can be faster than \code{vptree_searchRadius} and
\code{vptree_searchRadiusKnown}. Indexing starts with 1, as in R language.

\code{vptree_getItems} returns a list of points in it.

\code{vptree_getFunction} returns a metric function used in the tree.

\code{vptree_serialize} saves a structure of a tree to a file.
This function do not save a list of points or metric function. For saving whole
tree please use \code{vptree_save}. Do not use this function unless you know what
you are doing.

\code{vptree_read} loads a structure of a tree from a file.
This function do not load a list of points or metric function. For loading whole
tree please use \code{vptree_load}. Do not use this function unless you know what
you are doing.

\code{vptree_setItems} sets a set of points in metric space. Using this
function after building a tree will cause problems. Do not use this function
unless you know what you are doing.

\code{vptree_setMetricFunction} sets metric function. Using this
function after building a tree will cause problems. Do not use this function
unless you know what you are doing.

\code{vptree_save} saves the tree into a group of 3 files: Tree itself,
points which are R objects and metric function. Only prefix of file names
is needed, which can be absolute or relative path.

\code{vptree_load} loads the tree from a group of 3 files: Tree itself,
points which are R objects and metric function. Only prefix of file names
is needed, which can be absolute or relative path.
}

